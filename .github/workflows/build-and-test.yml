name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore --verbosity normal
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release --verbosity normal
      
    - name: Run unit tests
      run: |
        dotnet test AspireWithCosmos.Tests \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --logger trx \
          --logger "console;verbosity=detailed" \
          --results-directory TestResults \
          --collect:"XPlat Code Coverage" \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      env:
        ASPNETCORE_ENVIRONMENT: Development
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: |
          TestResults/*.trx
          TestResults/*/coverage.opencover.xml
        retention-days: 30
        
    - name: Upload code coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: TestResults/*/coverage.opencover.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: TestResults/*.trx
        reporter: dotnet-trx
        fail-on-error: true
        
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Run security scan
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee vulnerable-packages.log
        if grep -q "has the following vulnerable packages" vulnerable-packages.log; then
          echo "❌ Vulnerable packages found!"
          cat vulnerable-packages.log
          exit 1
        else
          echo "✅ No vulnerable packages found"
        fi
